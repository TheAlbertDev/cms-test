---
import { getEntry } from "astro:content";
import { getCollection } from "astro:content";
import Layout from "../../../layouts/Layout.astro";
import GradientTag from "../../../components/GradientTag.astro";
import { defaultLang, languages } from "../../../i18n/ui";
import { getLangFromUrl, useTranslations } from "../../../i18n/utils";
import readingTime from "reading-time";
import SharePost from "../../../components/SharePost.astro";
import TableofContents from "../../../components/TableofContents.astro";
import Tags from "../../../components/Tags.astro";
import { Code } from "astro-expressive-code/components";
import InfoNote from "../../../components/InfoNote.astro";
import AuthorNote from "../../../components/AuthorNote.astro";

export async function getStaticPaths() {
  const posts = await getCollection("posts");
  return posts.map((post) => {
    const { slug } = post;

    return {
      params: {
        lang:
          slug.split("/")[0] === defaultLang ? undefined : slug.split("/")[0],
        slug: slug.split("/")[1],
      },
    };
  });
}

const { lang, slug } = Astro.params;
const urlLang = getLangFromUrl(Astro.url);

const t = useTranslations((urlLang ?? defaultLang) as keyof typeof languages);

const post = (await getEntry("posts", `${lang ?? defaultLang}/${slug}`))!;
const category = await getEntry(post.data.category);
const authors = await Promise.all(
  post.data.authors.map((author) => getEntry(author.author)),
);
const { Content, headings } = await post.render();
const readingMinutes = Math.ceil(readingTime(post.body).minutes);
---

<Layout title={post.data.title}>
  <article class="container mx-auto max-w-screen-lg">
    <header>
      <div class="my-14">
        <div class="text-sm">
          <GradientTag>{category?.data.name}</GradientTag>
        </div>
        <h1 class="text-4xl font-bold mb-4">
          {post.data.title}
        </h1>
        <p>{post.data.description}</p>
      </div>
      <img
        src={post.data.image}
        alt={post.data.title}
        class="aspect-[1200/630] mx-0 w-full h-full object-cover rounded-lg overflow-hidden"
      />
    </header>
    <section class="flex justify-between flex-wrap gap-x-96 pt-6 items-center">
      <div class="flex flex-col gap-y-1">
        <div class="text-sm flex justify-start items-center font-bold">
          {authors.map(async (author) => <span>{author.data.name}</span>)}
        </div>
        <div class="text-sm font-mono">
          {
            `${Intl.DateTimeFormat(lang ?? defaultLang, {
              month: "long",
              day: "numeric",
              year: "numeric",
            }).format(
              post.data.pubDate,
            )} | ${readingMinutes} ${t(readingMinutes == 1 ? "post.readingTime.minute" : "post.readingTime.minutes")}`
          }
        </div>
      </div>
      <SharePost post={post} />
    </section>
    <div class="divider"></div>
    <div class="grid grid-row-2 md:gap-x-12 grid-cols-1 md:grid-cols-12 lg:grid-cols-10">
      <section
        class="article-content prose-pre:max-w-[85vw] md:prose-pre:max-w-none prose prose-p:mb-6 prose-h2:mb-5 prose-h2:mt-10 prose-h3:mb-3 prose-h3:mt-5 col-span-1 md:col-span-8 lg:col-span-7 text-lg"
      >
        <Content components={{ Code, InfoNote, AuthorNote }} />
      </section>
      <aside class="col-span-1 md:col-span-4 lg:col-span-3">
        <section><Tags tags={post.data.tags} /></section>
        <section class="hidden md:block sticky top-20">
          <TableofContents headings={headings} />
        </section>
      </aside>
    </div>
  </article>
</Layout>
<style>
  #post-content p {
    margin: 24px !important;
  }
</style>
