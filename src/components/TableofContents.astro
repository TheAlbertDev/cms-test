---
import { defaultLang } from "../i18n/ui";

import { useTranslations } from "../i18n/utils";

const { lang } = Astro.params;
const t = useTranslations((lang ?? defaultLang) as keyof typeof lang);

interface MarkdownHeading {
  depth: number;
  slug: string;
  text: string;
}

// @ts-ignore
const { headings }: { headings: MarkdownHeading[] } = Astro.props;
const h2Headers = headings.reduce(
  (acc, heading) => {
    if (heading.depth == 2)
      acc.push({ slug: heading.slug, text: heading.text });
    return acc;
  },
  [] as { slug: string; text: string }[],
);
---
{ h2Headers.length > 0 && <>
<h2 class="text-lg font-bold">{t("post.toc")}</h2>
<div class="divider mb-0 mt-0"></div>
<ul class="toc menu menu-md rounded-box gap-y-2">
  {
    h2Headers.map((h2header) => (
      <li>
        <a href={`#${h2header.slug}`}>{h2header.text}</a>
      </li>
    ))
  }
</ul>
<script>
  addIntersectionObserver();

  function addIntersectionObserver() {
    const observer = new IntersectionObserver((sections) => {
      sections.forEach((section) => {
        const heading = section.target.querySelector("h2");
        if (!heading) return;
        const id = heading.getAttribute("id");

        // Get the link to this section's heading
        const link = document.querySelector(`.toc li a[href="#${id}"]`);
        if (!link) return;

        // Add/remove the .active class based on whether the
        // section is visible
        const addRemove = section.intersectionRatio > 0 ? "add" : "remove";
        link.classList[addRemove]("active");
      });
    });

    document.querySelectorAll(".article-content section").forEach((section) => {
      observer.observe(section);
    });
  }
</script>
</>
}

